<?php
/*  
  +----------------------------------------------------------------------+
  | PHP Version 4                                                        |
  +----------------------------------------------------------------------+
  | Copyright (c) 1997-2004 The PHP Group                                |
  +----------------------------------------------------------------------+
  | This source file is subject to version 3.0 of the PHP license,       |
  | that is bundled with this package in the file LICENSE, and is        |
  | available through the world-wide-web at the following url:           |
  | http://www.php.net/license/3_0.txt.                                  |
  | If you did not receive a copy of the PHP license and are unable to   |
  | obtain it through the world-wide-web, please send a note to          |
  | license@php.net so we can mail you a copy immediately.               |
  +----------------------------------------------------------------------+
  | Authors:    Hartmut Holzgraefe <hholzgra@php.net>                    |
  |             Gabor Hojtsy <goba@php.net>                              |
  +----------------------------------------------------------------------+
  
  Id: file-entities.php.in,v 1.22 2004/09/02 22:28:30 goba Exp

*/

/**
 *
 * Create entities/file-entities.ent with respect
 * to all the specialities needed:
 *
 * Also take in account, that if XSLT style sheets are used,
 * special file:/// prefixed path values are needed.
 *
 */

// Always flush output
ob_implicit_flush();
// This script runs for a long time
set_time_limit(0);

$WORKDIR = '.';
$SRCDIR  = "$WORKDIR/xml";

// ......:ARGUMENT PARSING:.....................................................
	
// The output directory, which we need to parse for windows specific
// things, and correct all problems is needed.
// Also use absolute path to have meaningful error messages
$out_dir = $WORKDIR; //abs_path(strip_cygdrive($WORKDIR));

// this path if used for saving the ent file:
$script_out_dir = $out_dir;

// The source directory is passed in the 5th argument counting from backwards.
$srcdir = $SRCDIR; //abs_path($SRCDIR);

// ......:ENTITY CREATION:......................................................

// Put all the file entitites info $entities
$entities = array();
file_entities($srcdir, $srcdir, $entities);

// Open file for appending and write out all entitities
$fp = fopen("$script_out_dir/entities/file-entities.ent", "w");
if (!$fp) {
    die("ERROR: Failed to open $script_out_dir/entities/file-entities.ent for writing\n");
}

echo "\nCreating file: entities/file-entities.ent...\n";

// File header
fputs($fp, "<!-- DON'T TOUCH - AUTOGENERATED BY file-entities.php -->\n\n");
/*
// The global function index page is special
fputs(
   $fp,
   "<!-- global function index file -->\n" .
   entstr("global.function-index", "$out_dir/funcindex.xml") . "\n"
);

// The missing id file is generated after this pass
fputs(
   $fp,
   "<!-- generated file with missing ids -->\n" .
   entstr("missing-ids", "$trans_dir/missing-ids.xml") . "\n" .
   "<!-- all other files -->\n"
);*/

// Write out all other entities
foreach ($entities as $entity) {
    fputs($fp, $entity);
}
fclose($fp);

// Here is the end of the code
exit;

// ......:FUNCTION DECLARATIONS:................................................

/**
 * Generate absolute path from a relative path, taking accout
 * the current wokring directory.
 *
 * @param string $path Relative path
 * @return string Absolute path generated
 */
function abs_path($path) {

    // This is already an absolute path (begins with / or a drive letter)
    if (preg_match("!^(/|\\w:)!", $path)) { return $path; }

    // Get directory parts

    $absdir  = str_replace("\\", "/", getcwd());
    $absdirs = explode("/", preg_replace("!/scripts$!", "", $absdir));
    $dirs    = explode("/", $path);

    // Generate array representation of absolute path
    foreach ($dirs as $dir) {
        if (empty($dir) or $dir == ".") continue;
        else if ($dir == "..") array_pop($absdirs);
        else array_push($absdirs, $dir);
    }

    // Return with string
    return join("/", $absdirs);
}

/**
 * Create file entities, and put them into the array passed as the
 * last argument (passed by reference).
 *
 * @param string $work_dir English files' directory
 * @param string $orig_dir Original directory
 * @param array $entities Entities string array
 * @return boolean Success signal
 */
function file_entities($work_dir, $orig_dir, &$entities) {
    // Try to open English working directory
    $dh = opendir($work_dir);
    if (!$dh) { return FALSE; }

    // If the working directory is a reference functions directory,
    // The start to generate a functions.xml file for that folder.
    //if (preg_match("!/reference/.*/functions$!", $work_dir)) {
    /*
        // Start new functions file with empty entity set
        $function_entities = array();
        $functions_file = "$work_dir.xml";

        // Get relative file path to original directory, and form an entity
        $functions_file_entity = fname2entname(str_replace("$orig_dir/", "", $work_dir));
        $entities[] = entstr($functions_file_entity, $functions_file);
    }*/

    // While we can read that directory
    while (($file = readdir($dh)) !== FALSE) {

        // If file name begins with . skip it
        if ($file{0} == ".") { continue; }

        // If we found a directory, and it's name is not
        // CVS, recursively go into it, and generate entities
        if (is_dir($work_dir . "/" . $file)) {
            if ($file == "CVS" || $file == ".svn") { continue; }
            file_entities($work_dir . "/" . $file, $orig_dir, $entities);
        }

        // If the file name ends in ".xml"
        if (preg_match("!\\.xml$!", $file)) {
            
            // Get relative file name and get entity name for it
            $name = str_replace(
                "$orig_dir/",
                "",
                $work_dir . "/" . preg_replace("!\\.xml$!", "", $file)
            );
            $name = fname2entname($name);

            // If this is a functions directory, collect it into
            // the special $function_entities array
            /*if (isset($function_entities)) {
                $function_entities[] = "&$name;";
            }*/
            
            $path = ".$work_dir/$file";

            // Append to entities array
            $entities[] = entstr($name, $path);

        } // end of "if xml file"
    } // end of readdir loop
    
    // Close directory
    closedir($dh);

    // If we created a function entities list, write it out
    /*if (isset($function_entities)) {
        
        // Sort by name
        sort($function_entities);
        
        // Write out all entities with newlines
        $fp = fopen($functions_file, "w");
        foreach ($function_entities as $entity) {
            fputs($fp, "$entity\n");
        }
        fclose($fp);
    }*/
} // end of funciton file_entities()

/**
 * Convert a file name (with path) to an entity name.
 *
 * Converts: _ => - and / => .
 *
 * @param string $fname File name
 * @return string Entity name
 */
function fname2entname($fname)
{
    return str_replace("_", "-", str_replace("/", ".", $fname));
}

/**
 * Return entity string with the given entityname and filename.
 * 
 * @param string $entname Entity name
 * @param string $filename Name of file
 * @return string Entity declaration string
 */
function entstr($entname, $filename)
{
    // If we have no file, than this is not a system entity
    if ($filename == "") {
        return sprintf("<!ENTITY %-28s        ''>\n", $entname);
    } else {
        return sprintf("<!ENTITY %-28s SYSTEM '%s'>\n", $entname, strip_cygdrive($filename));
    }
}

/**
 * Return windows style path for cygwin.
 * 
 * @param string $path Orginal path
 */
function strip_cygdrive($path){
	return preg_replace("!^/cygdrive/(\\w)/!", "\\1:/", $path);
}
?>
